import time


class OtherCommands():
  trash_data = {}
  logging = None
  bot, dp, types = None, None, None

  async def getTimeFormat(self, second):
    ts = time.gmtime(second)
    if second >= 86400:
      days = int(second / 86400)
    else:
      days = 0
    hour = time.strftime("%H", ts)
    min = time.strftime("%M", ts)
    sec = time.strftime("%S", ts)
    return f"{days}–î.{hour}–ß.{min}–ú.{sec}–°."

  async def delete_commands(self, admin_id):
    await self.dp.bot.delete_my_commands(self.types.bot_command_scope.BotCommandScopeChat(admin_id))

  async def set_commands(self):
    await self.bot.set_my_commands([
      self.types.BotCommand("profile", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
      #self.types.BotCommand("check_courses", "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã"),
      self.types.BotCommand("chat", "üí¨ –û–±—â–µ–Ω–∏–µ —Å chat-GPT –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é")
    ], self.types.bot_command_scope.BotCommandScopeAllGroupChats())
    await self.bot.set_my_commands([
      self.types.BotCommand("profile", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
      self.types.BotCommand("chat", "üí¨ –û–±—â–µ–Ω–∏–µ —Å chat-GPT –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é")
    ], self.types.bot_command_scope.BotCommandScopeAllPrivateChats('all_private_chats'))


  async def set_admin_commands(self, admins):
    for id in admins:
      try:
        await self.dp.bot.set_my_commands([
          self.types.BotCommand("profile", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
          #self.types.BotCommand("check_courses", "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã"),
          self.types.BotCommand("chat", "üí¨ –û–±—â–µ–Ω–∏–µ —Å chat-GPT –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é"),
          self.types.BotCommand("update_join_message", "–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
          self.types.BotCommand("check_join_message", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
          self.types.BotCommand("queues", "üïì –°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏"),
          self.types.BotCommand("purge_queues", "–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥–∏"),
          self.types.BotCommand("mailing", "üîó –†–∞—Å—Å—ã–ª–∫–∞"),
          self.types.BotCommand("channels_subscribe", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"),
          self.types.BotCommand("channels_necessary", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"),
          self.types.BotCommand("get_users", "–í—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
          self.types.BotCommand("show_links", "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏"),
          self.types.BotCommand("add_link", "–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"),
          self.types.BotCommand("black_list", "üîû –ó–∞–ø—Ä–µ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞"),
          self.types.BotCommand("restart", "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞")
        ], self.types.bot_command_scope.BotCommandScopeChat(id))
      except:
        pass

  async def set_trash(self, message=None, chat=None):
    if message != None:
      chat_id, message_id = 'message' not in message and [str(message.chat.id), message.message_id] or [
        str(message.message.chat.id), message.message.message_id]

      if self.trash_data.get(chat_id) == None:
        self.trash_data[chat_id] = []
      self.trash_data[chat_id].append(message_id)

    if chat:
      chat = str(chat)
      await self.delete_trash(chat)

  async def delete_trash(self, chat_id):
    if self.trash_data.get(chat_id):
      for message_id in self.trash_data[chat_id]:
        try:
          await self.bot.delete_message(chat_id, message_id)
        except Exception as e:
          pass

      del self.trash_data[chat_id]


other_commands = OtherCommands()
